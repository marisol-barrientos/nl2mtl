<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE log SYSTEM "logger.dtd">
<log>
File Measures: 
	Number of req in file = 35
	Number of prim req in file = 43
<SucceededRequirement>
	<Requirement>
		ID: [fa_4:]
		text:  if the distance to the RCMTECHTERM_vehicle_ahead falls below the specified speed dependent safety distance, the vehicle brakes are activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the distance to the RCMTECHTERM_vehicle_ahead falls below the specified speed dependent safety distance, the vehicle brakes are activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the distance to the RCMTECHTERM_vehicle_ahead < the specified speed dependent safety distance)] ==> [(the vehicle brakes.crrStatus = activated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the distance to the RCMTECHTERM_vehicle_ahead falls below the specified speed dependent safety distance
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the distance to the RCMTECHTERM_vehicle_ahead
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the specified speed dependent safety distance
							</ArgDetails>
						</Operands>
						<Operator>
							relation:falls
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the distance to the RCMTECHTERM_vehicle_ahead < the specified speed dependent safety distance
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the vehicle brakes are activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the vehicle brakes
							</ArgDetails>
						</Operands>
						<Operator>
							relation:are activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the vehicle brakes.crrStatus = activated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [al_105:]
		text:  if the driver holds the RCMTECHTERM_pitman_arm for at least 5 seconds to RCMVAL_tip_blinking_left, a flashing is released for the left direction indicators before the RCMTECHTERM_pitman_arm leaves RCMVAL_tip_blinking_left.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the driver holds the RCMTECHTERM_pitman_arm for at least 5 seconds to RCMVAL_tip_blinking_left, a flashing is released for the left direction indicators before the RCMTECHTERM_pitman_arm leaves RCMVAL_tip_blinking_left.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(G{t>=5}(P))] ==> [F(R) ==> (F((Q) || (R) ) U (R))] )
					MTL-Formula: G( [(G{t>=5}(hold_to(the driver, the RCMTECHTERM_pitman_arm, RCMVAL_tip_blinking_left)))] ==> [F(leave(the RCMTECHTERM_pitman_arm, RCMVAL_tip_blinking_left)) ==> (F((release_for(a flashing, the left direction indicators)) || (leave(the RCMTECHTERM_pitman_arm, RCMVAL_tip_blinking_left)) ) U (leave(the RCMTECHTERM_pitman_arm, RCMVAL_tip_blinking_left)))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the driver holds the RCMTECHTERM_pitman_arm to RCMVAL_tip_blinking_left
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the driver
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_pitman_arm
							</ArgDetails>
							Arg[2]
							<ArgDetails>
								Text: RCMVAL_tip_blinking_left
							</ArgDetails>
						</Operands>
						<Operator>
							relation:holds
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 5
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: >=
							Value: 5
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<FormalSemantic>
							ProcessName: hold_to
							OperandList: {Arg[1], Arg[2], Arg[3]}
							PredicateFormal: hold_to(the driver, the RCMTECHTERM_pitman_arm, RCMVAL_tip_blinking_left)
						</FormalSemantic>
					</Condition>
					<Action>
						Text = a flashing is released for the left direction indicators
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a flashing
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the left direction indicators
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is released
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: release_for
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: release_for(a flashing, the left direction indicators)
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_pitman_arm leaves RCMVAL_tip_blinking_left
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_pitman_arm
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_tip_blinking_left
										</ArgDetails>
									</Operands>
									<Operator>
										relation:leaves
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										ProcessName: leave
										OperandList: {Arg[1], Arg[2]}
										PredicateFormal: leave(the RCMTECHTERM_pitman_arm, RCMVAL_tip_blinking_left)
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_6:]
		text:  if the distance to the RCMTECHTERM_preceding_vehicle increases above the speed_dependent safety distance, the vehicle accelerates within 2 seconds before the set speed is reached.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the distance to the RCMTECHTERM_preceding_vehicle increases above the speed_dependent safety distance, the vehicle accelerates within 2 seconds before the set speed is reached.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G([S] ==> [F(Q) ==> (F((F{t=2}(P)) || (Q) ) U (Q))] )
					MTL-Formula: G([the distance to the RCMTECHTERM_preceding_vehicle > the speed_dependent safety distance]==>[F(the set speed.crrStatus = reach) ==> (F((F{t=2}(the vehicle.crrStatus = accelerate)) || (the set speed.crrStatus = reach) ) U (the set speed.crrStatus = reach))] )
				</Formal-Representation>
				<RCMDetails>
					<Condition>
						Text = if the distance to the RCMTECHTERM_preceding_vehicle increases above the speed_dependent safety distance
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the distance to the RCMTECHTERM_preceding_vehicle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the speed_dependent safety distance
							</ArgDetails>
						</Operands>
						<Operator>
							relation: increases above
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the distance to the RCMTECHTERM_preceding_vehicle > the speed_dependent safety distance
						</FormalSemantic>
						is repeated = false
					</Condition>
					<Action>
						Text = the vehicle accelerates
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the vehicle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:accelerates
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: accelerates
							TechnicalOperator: =
							PredicateFormal: the vehicle.crrStatus = accelerates
						</FormalSemantic>
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: <=
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the set speed is reached
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the set speed
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is reached
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										LHS: Arg[0].crrStatus
										RHS: reached
										TechnicalOperator: =
										PredicateFormal: the set speed.crrStatus = reached
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_35:]
		text:  when pressing the RCMTECHTERM_gas_pedal beyond 90, the speed limit is deactivated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when pressing the RCMTECHTERM_gas_pedal beyond 90, the speed limit is deactivated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_gas_pedal > 90)] ==> [(the speed limit.crrStatus = deactivated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when pressing the RCMTECHTERM_gas_pedal beyond 90
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_gas_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 90
							</ArgDetails>
						</Operands>
						<Operator>
							relation:pressing
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the RCMTECHTERM_gas_pedal > 90
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the speed limit is deactivated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the speed limit
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is deactivated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: deactivated
							TechnicalOperator: =
							PredicateFormal: the speed limit.crrStatus = deactivated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_99:]
		text:  if the speed of the RCMTECHTERM_preceding_vehicle decreases below 20, the distance is set to 2. when both vehicles are standing, the absolute distance is regulated to 2m. when the RCMTECHTERM_preceding_vehicle is accelerating, the distance is set to 3 before the vehicle speed exceeds 20 .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the speed of the RCMTECHTERM_preceding_vehicle decreases below 20, the distance is set to 2.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the speed of the RCMTECHTERM_preceding_vehicle < 20)] ==> [(the distance = 2)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the speed of the RCMTECHTERM_preceding_vehicle decreases below 20
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the speed of the RCMTECHTERM_preceding_vehicle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 20
							</ArgDetails>
						</Operands>
						<Operator>
							relation:decreases
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the speed of the RCMTECHTERM_preceding_vehicle < 20
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the distance is set to 2
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the distance
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 2
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the distance = 2
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		 	<PR>
				Id: [2]
				text:  when both vehicles are standing, the absolute distance is regulated to 2m.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(both vehicles.crrStatus = standing)] ==> [(the absolute distance = 2m)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when both vehicles are standing
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: both vehicles
							</ArgDetails>
						</Operands>
						<Operator>
							relation:are standing
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: standing
							TechnicalOperator: =
							PredicateFormal: both vehicles.crrStatus = standing
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the absolute distance is regulated to 2m
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the absolute distance
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 2m
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is regulated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the absolute distance = 2m
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [4]
				text:  when the RCMTECHTERM_preceding_vehicle is accelerating, the distance is set to 3 before the vehicle speed exceeds 20 .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [F(R) ==> (F((Q) || (R) ) U (R))] )
					MTL-Formula: G( [(the RCMTECHTERM_preceding_vehicle.crrStatus = accelerating)] ==> [F(the vehicle speed > 20) ==> (F((the distance = 3) || (the vehicle speed > 20) ) U (the vehicle speed > 20))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_preceding_vehicle is accelerating
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_preceding_vehicle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is accelerating
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: accelerating
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_preceding_vehicle.crrStatus = accelerating
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the distance is set to 3
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the distance
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 3
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the distance = 3
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the vehicle speed exceeds 20
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the vehicle speed
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: 20
										</ArgDetails>
									</Operands>
									<Operator>
										relation:exceeds
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										LHS: Arg[0]
										RHS: Arg[1]
										TechnicalOperator: >
										PredicateFormal: the vehicle speed > 20
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_31:]
		text:  the current vehicle speed is adopted as speed limit.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  the current vehicle speed is adopted as speed limit.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the current vehicle speed = speed limit)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Action>
						Text = the current vehicle speed is adopted as speed limit
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the current vehicle speed
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: speed limit
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is adopted
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the current vehicle speed = speed limit
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-18:]
		text: the duration of a flashing cycle is 1 second.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the duration of a flashing cycle is 1 second.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the duration of a flashing cycle = 1 second)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Action>
						Text = the duration of a flashing cycle is 1 second
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the duration of a flashing cycle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 1 second
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the duration of a flashing cycle = 1 second
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_81:]
			text: the adaptive cruise control system issues acoustic alarm if the calculated distance is less than t . it issues visual warning if the calculated distance is less than t2 .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the adaptive cruise control system issues acoustic alarm if the calculated distance is less than t .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the calculated distance < t)] ==> [(issue(the adaptive cruise control system, acoustic alarm))] ) 
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the calculated distance is less than t
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the calculated distance
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: t
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the calculated distance < t
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the adaptive cruise control system issues acoustic alarm
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the adaptive cruise control system
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: acoustic alarm
							</ArgDetails>
						</Operands>
						<Operator>
							relation:issues
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: issue
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: issue(the adaptive cruise control system, acoustic alarm)
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [2]
				text:  it issues visual warning if the calculated distance is less than t2 .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the calculated distance < t2)] ==> [(issue(it, visual warning))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the calculated distance is less than t2
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the calculated distance
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: t2
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the calculated distance < t2
						</FormalSemantic>
					</Condition>
					<Action>
						Text = it issues visual warning
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: it
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: visual warning
							</ArgDetails>
						</Operands>
						<Operator>
							relation:issues
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: issue
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: issue(it, visual warning)
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-28:]
		text: a subvoltage is present if the voltage in the vehicle electrical system is less than 8.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: a subvoltage is present if the voltage in the vehicle electrical system is less than 8.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the voltage in the vehicle electrical system < 8)] ==> [(a subvoltage = present)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the voltage in the vehicle electrical system is less than 8
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the voltage in the vehicle electrical system
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 8
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the voltage in the vehicle electrical system < 8
						</FormalSemantic>
					</Condition>
					<Action>
						Text = a subvoltage is present
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a subvoltage
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: present
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: a subvoltage = present
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-16:]
		text:  if  the RCMTECHTERM_hazard_warning_light_switch is released, direction indicators flash synchronically. if the ignition key is in the ignition lock, the pulse ratio of bright to dark is 1. if the ignition key is not in the lock, the pulse ratio is 5.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if  the RCMTECHTERM_hazard_warning_light_switch is released, direction indicators flash synchronically.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_hazard_warning_light_switch.crrStatus = released)] ==> [(direction indicators.crrStatus = flash)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_hazard_warning_light_switch is released
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_hazard_warning_light_switch
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is released
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: released
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_hazard_warning_light_switch.crrStatus = released
						</FormalSemantic>
					</Condition>
					<Action>
						Text = direction indicators flash
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: direction indicators
							</ArgDetails>
						</Operands>
						<Operator>
							relation:flash
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: flash
							TechnicalOperator: =
							PredicateFormal: direction indicators.crrStatus = flash
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [2]
				text:  if the ignition key is in the ignition lock, the pulse ratio of bright to dark is 1.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(in(the ignition key, the ignition lock))] ==> [(the pulse ratio = 1)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the ignition key is in the ignition lock
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the ignition key
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the ignition lock
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: in
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: in(the ignition key, the ignition lock)
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the pulse ratio is 1
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the pulse ratio
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 1
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the pulse ratio = 1
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [3]
				text:  if the ignition key is not in the lock, the pulse ratio is 5.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(¬P)] ==> [(Q)] )
					MTL-Formula: G( [(¬in(the ignition key, the lock))] ==> [(the pulse ratio = 5)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the ignition key is not in the lock
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the ignition key
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the lock
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							ProcessName: in
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: in(the ignition key, the lock)
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the pulse ratio is 5
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the pulse ratio
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 5
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the pulse ratio = 5
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-26:]
		text: if the light rotary switch is RCMVAL_auto, the adaptive RCMTECHTERM_high_beam_headlights are activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the light rotary switch is RCMVAL_auto, the adaptive RCMTECHTERM_high_beam_headlights are activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the light rotary switch = RCMVAL_auto)] ==> [(the adaptive RCMTECHTERM_high_beam_headlights.crrStatus = activated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the light rotary switch is RCMVAL_auto
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the light rotary switch
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_auto
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the light rotary switch = RCMVAL_auto
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the adaptive RCMTECHTERM_high_beam_headlights are activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the adaptive RCMTECHTERM_high_beam_headlights
							</ArgDetails>
						</Operands>
						<Operator>
							relation:are activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the adaptive RCMTECHTERM_high_beam_headlights.crrStatus = activated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-14:]
		text: the cognitive threshold of a human observer shall be set to the deviation that is less than 5.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the cognitive threshold of a human observer shall be set to the deviation that is less than 5.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the cognitive threshold of a human observer = the deviation)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Action>
						Text = the cognitive threshold of a human observer shall be set to the deviation
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the cognitive threshold of a human observer
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the deviation
								<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the deviation
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: 5
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
								<FormalSemantic>
									LHS: Arg[0]
									RHS: Arg[1]
									TechnicalOperator: <
									PredicateFormal: the deviation < 5
								</FormalSemantic>
							</Condition>
							</HiddenConstraint>
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the cognitive threshold of a human observer = the deviation
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-24:]
		text: if the darkness switch is activated, the ambient lighting is not activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the darkness switch is activated, the ambient lighting is not activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(the darkness switch.crrStatus = activated)] ==> [(¬the ambient lighting.crrStatus = activated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the darkness switch is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the darkness switch
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the darkness switch.crrStatus = activated
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the ambient lighting is not activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the ambient lighting
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the ambient lighting.crrStatus = activated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-12:]
		text: if the RCMTECHTERM_brake_pedal exceeds the threshold value RCMVAR_m, the RCMTECHTERM_braking_force is strengthened to 100.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the RCMTECHTERM_brake_pedal exceeds the threshold value RCMVAR_m, the RCMTECHTERM_braking_force is strengthened to 100.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_brake_pedal > RCMVAR_m)] ==> [(the RCMTECHTERM_braking_force = 100)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_brake_pedal exceeds the RCMVAR_m
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_brake_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMVAR_m
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the RCMTECHTERM_brake_pedal > RCMVAR_m
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_braking_force is strengthened to 100
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_braking_force
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 100
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is strengthened
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_braking_force = 100
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-34:]
		text: if RCMTECHTERM_advancing_vehicle is not recognized, the high beam illumination is restored within 2 seconds.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if RCMTECHTERM_advancing_vehicle is not recognized, the high beam illumination is restored within 2 seconds.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(¬P)] ==> [(F{t=2}(Q))] )
					MTL-Formula: G( [(¬RCMTECHTERM_advancing_vehicle.crrStatus = recognized)] ==> [(F{t=2}(the high beam illumination.crrStatus = restored))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if RCMTECHTERM_advancing_vehicle is not recognized
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMTECHTERM_advancing_vehicle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is recognized
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: recognized
							TechnicalOperator: =
							PredicateFormal: RCMTECHTERM_advancing_vehicle.crrStatus = recognized
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the high beam illumination is restored
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the high beam illumination
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is restored
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: restored
							TechnicalOperator: =
							PredicateFormal: the high beam illumination.crrStatus = restored
						</FormalSemantic>
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 2
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: <=
							Value: 2
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-22:]
		text: if the daytime running light is activated, the low beam headlights are activated after starting the engine. when the ambient light is activated, the low beam headlights remain active

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the daytime running light is activated, the low beam headlights are activated after starting the engine.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(Q)] ==> [((S) ==> (R))] )
					MTL-Formula: G( [(the daytime running light.crrStatus = activate)] ==> [((start(the engine)) ==> (the low beam headlights.crrStatus = activate))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the daytime running light is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the daytime running light
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the daytime running light.crrStatus = activate
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the low beam headlights are activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the low beam headlights
							</ArgDetails>
						</Operands>
						<Operator>
							relation:are activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the low beam headlights.crrStatus = activate
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: StartUpPhase
								<Condition>
									Keyword: null
									Text = after starting the engine
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the engine
										</ArgDetails>
									</Operands>
									<Operator>
										relation:starting
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										ProcessName: start
										OperandList: {Arg[1]}
										PredicateFormal: start(the engine)
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [2]
				text:  when the ambient light is activated, the low beam headlights remain active.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the ambient light.crrStatus = activate)]==> [(the low beam headlights=active))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the ambient light is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the ambient light
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the ambient light.crrStatus = activate
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the low beam headlights remain
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the low beam headlights
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: active
							</ArgDetails>
						</Operands>
						<Operator>
							relation:remain
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
						        LHS: Arg[0]
							RHS: active
							PredicateFormal: the low beam headlights=active
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-32:]
		text: an overvoltage is present if the voltage in the vehicle electrical system is more than 14.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: an overvoltage is present if the voltage in the vehicle electrical system is more than 14.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the voltage in the vehicle electrical system > 14)] ==> [(an overvoltage = present)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the voltage in the vehicle electrical system is more than 14
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the voltage in the vehicle electrical system
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 14
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the voltage in the vehicle electrical system > 14
						</FormalSemantic>
					</Condition>
					<Action>
						Text = an overvoltage is present
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: an overvoltage
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: present
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: an overvoltage = present
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-20:]
		text: if flashing cycles exceed 1000, the cumulated deviation must not exceed 5.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if flashing cycles exceed 1000, the cumulated deviation must not exceed 5.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(flashing cycles > 1000)] ==> [(¬the cumulated deviation > 5)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if flashing cycles exceed 1000
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: flashing cycles
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 1000
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceed
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: flashing cycles > 1000
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the cumulated deviation must not exceed 5
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the cumulated deviation
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 5
							</ArgDetails>
						</Operands>
						<Operator>
							relation:must exceed
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the cumulated deviation > 5
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-30:]
		text: if a subvoltage is present, the ambient light should not be available.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if a subvoltage is present, the ambient light should not be available.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(a subvoltage = present)] ==> [(¬the ambient light = available)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if a subvoltage is present
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a subvoltage
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: present
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: a subvoltage = present
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the ambient light should not be available
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the ambient light
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: available
							</ArgDetails>
						</Operands>
						<Operator>
							relation:should be
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the ambient light = available
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_19:]
		text:  the cruise control lever activates the cruise control.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  the cruise control lever activates the cruise control.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(activate(the cruise control lever, the cruise control))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Action>
						Text = the cruise control lever activates the cruise control
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the cruise control lever
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the cruise control
							</ArgDetails>
						</Operands>
						<Operator>
							relation:activates
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: activate
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: activate(the cruise control lever, the cruise control)
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_36:]
		text:  when the pressure on the RCMTECHTERM_gas_pedal decreases below 90, the speed limit is activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the pressure on the RCMTECHTERM_gas_pedal decreases below 90, the speed limit is activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the pressure on the RCMTECHTERM_gas_pedal < 90)] ==> [(the speed limit.crrStatus = activated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the pressure on the RCMTECHTERM_gas_pedal decreases below 90
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the pressure on the RCMTECHTERM_gas_pedal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 90
							</ArgDetails>
						</Operands>
						<Operator>
							relation:decreases
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the pressure on the RCMTECHTERM_gas_pedal < 90
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the speed limit is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the speed limit
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the speed limit.crrStatus = activated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_5:]
		text:  if the maximum deceleration is RCMVAL_insufficient_to_stop before a collision with the RCMTECHTERM_vehicle_ahead, the vehicle warns the driver by acoustical signals for 1 seconds every 2 seconds. the maximum deceleration is 5.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the maximum deceleration is RCMVAL_insufficient_to_stop before a collision with the RCMTECHTERM_vehicle_ahead, the vehicle warns the driver by acoustical signals for 1 seconds every 2 seconds.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [F(P) ==> (F((Q) || (P) ) U (P))] ==> [G(F{t=2}((G{t=1}(R))))] )
					MTL-Formula: G( [F(a collision with the RCMTECHTERM_vehicle_ahead = RCMVAL_True) ==> (F((the maximum deceleration = RCMVAL_insufficient_to_stop) || (a collision with the RCMTECHTERM_vehicle_ahead = RCMVAL_True) ) U (a collision with the RCMTECHTERM_vehicle_ahead = RCMVAL_True))] ==> [G(F{t=2}((G{t=1}(warn_by(the vehicle, the driver, acoustical signals)))))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the maximum deceleration is RCMVAL_insufficient_to_stop
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the maximum deceleration
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_insufficient_to_stop
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the maximum deceleration = RCMVAL_insufficient_to_stop
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the vehicle warns the driver by acoustical signals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the vehicle
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the driver
							</ArgDetails>
							Arg[2]
							<ArgDetails>
								Text: acoustical signals
							</ArgDetails>
						</Operands>
						<Operator>
							relation:warns
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 1
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: =
							Value: 1
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<FormalSemantic>
							ProcessName: warn_by
							OperandList: {Arg[1], Arg[2], Arg[3]}
							PredicateFormal: warn_by(the vehicle, the driver, acoustical signals)
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before a collision with the RCMTECHTERM_vehicle_ahead
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: a collision with the RCMTECHTERM_vehicle_ahead
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: RCMVAL_True
										</ArgDetails>
									</Operands>
									<Operator>
										relation:equals
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										LHS: Arg[0]
										RHS: Arg[1]
										TechnicalOperator: =
										PredicateFormal: a collision with the RCMTECHTERM_vehicle_ahead = RCMVAL_True
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [2]
				text:  the maximum deceleration is 5.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the maximum deceleration = 5)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Action>
						Text = the maximum deceleration is 5
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the maximum deceleration
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 5
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the maximum deceleration = 5
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [al_144:]
		text:  the maximum deviation of the pulse ratio should be below the cognitive threshold of a human observer.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  the maximum deviation of the pulse ratio should be below the cognitive threshold of a human observer.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the maximum deviation of the pulse ratio < the cognitive threshold of a human observer)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Action>
						Text = the maximum deviation of the pulse ratio should be below the cognitive threshold of a human observer
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the maximum deviation of the pulse ratio
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the cognitive threshold of a human observer
							</ArgDetails>
						</Operands>
						<Operator>
							relation:should be
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the maximum deviation of the pulse ratio < the cognitive threshold of a human observer
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_32:]
		text:  if the speed limit function is activated, the current speed must not exceed the RCMTECHTERM_set_speed_limit.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the speed limit function is activated, the current speed must not exceed the RCMTECHTERM_set_speed_limit.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(the speed limit function.crrStatus = activated)] ==> [(¬the current speed > the RCMTECHTERM_set_speed_limit)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the speed limit function is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the speed limit function
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the speed limit function.crrStatus = activated
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the current speed must not exceed the RCMTECHTERM_set_speed_limit
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the current speed
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the RCMTECHTERM_set_speed_limit
							</ArgDetails>
						</Operands>
						<Operator>
							relation:must exceed
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the current speed > the RCMTECHTERM_set_speed_limit
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [fa_86:]
		text:  when the velocity window is below 20, the distance to the RCMTECHTERM_vehicle_ahead shall be calculated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the velocity window is below 20, the distance to the RCMTECHTERM_vehicle_ahead shall be calculated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the velocity window < 20)] ==> [(the distance to the RCMTECHTERM_vehicle_ahead.crrStatus = calculated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the velocity window is below 20
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the velocity window
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: 20
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: <
							PredicateFormal: the velocity window < 20
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the distance to the RCMTECHTERM_vehicle_ahead shall be calculated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the distance to the RCMTECHTERM_vehicle_ahead
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be calculated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: calculated
							TechnicalOperator: =
							PredicateFormal: the distance to the RCMTECHTERM_vehicle_ahead.crrStatus = calculated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-19:]
		text: if RCMTECHTERM_tip_blinking was activated shortly before the RCMTECHTERM_hazard_warning_light_switch is deactivated, it shall not be activated while the deactivation of the RCMTECHTERM_hazard_warning_light_switch.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if RCMTECHTERM_tip_blinking was activated shortly before the RCMTECHTERM_hazard_warning_light_switch is deactivated, it shall not be activated while the deactivation of the RCMTECHTERM_hazard_warning_light_switch.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [F(P) ==> (F((R) || (P) ) U (P))] ==> [G( (((M)) ∧ ¬ ((¬T)) ∧ F((¬T))) ==> (F((¬S) || ((¬T)) ) U ((¬T))) )] )
					MTL-Formula: G( [F(the RCMTECHTERM_hazard_warning_light_switch.crrStatus = deactivate) ==> (F((RCMTECHTERM_tip_blinking.crrStatus = activate) || (the RCMTECHTERM_hazard_warning_light_switch.crrStatus = deactivate) ) U (the RCMTECHTERM_hazard_warning_light_switch.crrStatus = deactivate))] ==> [G( (((the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True)) ∧ ¬ ((¬the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True)) ∧ F((¬the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True))) ==> (F((¬it.crrStatus = activate) || ((¬the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True)) ) U ((¬the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True))) )] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if RCMTECHTERM_tip_blinking was activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: RCMTECHTERM_tip_blinking
							</ArgDetails>
						</Operands>
						<Operator>
							relation:was activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: RCMTECHTERM_tip_blinking.crrStatus = activate
						</FormalSemantic>
					</Condition>
					<Action>
						Text = it shall not be activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: it
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be activated
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: it.crrStatus = activate
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<LogicalRelation>
								relation: AND
							</LogicalRelation>
								<ConditionalScope>
									scope phase: StartUpPhase
									<Condition>
										Keyword: after
										Text = while the deactivation of the RCMTECHTERM_hazard_warning_light_switch
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the deactivation of the RCMTECHTERM_hazard_warning_light_switch
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_True
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: false
										<FormalSemantic>
											LHS: Arg[0]
											RHS: Arg[1]
											TechnicalOperator: =
											PredicateFormal: the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True
										</FormalSemantic>
									</Condition>
								</ConditionalScope>
								<ConditionalScope>
									scope phase: EndUpPhase
									<Condition>
										Keyword: until
										Text = while the deactivation of the RCMTECHTERM_hazard_warning_light_switch
										<Operands>
											Arg[0]
											<ArgDetails>
												Text: the deactivation of the RCMTECHTERM_hazard_warning_light_switch
											</ArgDetails>
											Arg[1]
											<ArgDetails>
												Text: RCMVAL_True
											</ArgDetails>
										</Operands>
										<Operator>
											relation:equals
										</Operator>
										Has valid-time:  false
										Is negatted: true
										<FormalSemantic>
											LHS: Arg[0]
											RHS: Arg[1]
											TechnicalOperator: =
											PredicateFormal: the deactivation of the RCMTECHTERM_hazard_warning_light_switch = RCMVAL_True
										</FormalSemantic>
									</Condition>
								</ConditionalScope>
						</ActionScope>
						<PreconditionalScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the RCMTECHTERM_hazard_warning_light_switch is deactivated
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the RCMTECHTERM_hazard_warning_light_switch
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is deactivated
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										LHS: Arg[0].crrStatus
										RHS: deactivate
										TechnicalOperator: =
										PredicateFormal: the RCMTECHTERM_hazard_warning_light_switch.crrStatus = deactivate
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</PreconditionalScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-29:]
		text: if a subvoltage is present, the adaptive RCMTECHTERM_high_beam_headlight should not be available.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if a subvoltage is present, the adaptive RCMTECHTERM_high_beam_headlight should not be available.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(a subvoltage = present)] ==> [(¬the adaptive RCMTECHTERM_high_beam_headlight = available)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if a subvoltage is present
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a subvoltage
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: present
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: a subvoltage = present
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the adaptive RCMTECHTERM_high_beam_headlight should not be available
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the adaptive RCMTECHTERM_high_beam_headlight
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: available
							</ArgDetails>
						</Operands>
						<Operator>
							relation:should be
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the adaptive RCMTECHTERM_high_beam_headlight = available
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-17:]
		text:  if  an emergency situation, the RCMTECHTERM_hazard_warning_light_switch is active before the car battery is empty.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if  an emergency situation, the RCMTECHTERM_hazard_warning_light_switch is active before the car battery is empty.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G([S]==> [F(Q) ==> (F((P) || (Q) ) U (Q))] )
					MTL-Formula: G([an emergency situation=True] ==> [F(the car battery = empty) ==> (F((the RCMTECHTERM_hazard_warning_light_switch = active) || (the car battery = empty) ) U (the car battery = empty))] )
				</Formal-Representation>
				<RCMDetails>
					<Condition>
						Text = the RCMTECHTERM_hazard_warning_light_switch is active
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: an emergency situation
							</ArgDetails>
						</Operands>
						<Operator>
							relation:
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: True
							TechnicalOperator: =
							PredicateFormal:  an emergency situation = True
						</FormalSemantic>
						is repeated = false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_hazard_warning_light_switch is active
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_hazard_warning_light_switch
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: active
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_hazard_warning_light_switch = active
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before the car battery is empty
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: the car battery
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: empty
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
									<FormalSemantic>
										LHS: Arg[0]
										RHS: Arg[1]
										TechnicalOperator: =
										PredicateFormal: the car battery = empty
									</FormalSemantic>
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-27:]
		text: if the camera recognizes the lights of an RCMTECHTERM_advancing_vehicle, the RCMTECHTERM_high_beam_headlight that is activated is reduced to low beam headlight within 5 seconds.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the camera recognizes the lights of an RCMTECHTERM_advancing_vehicle, the RCMTECHTERM_high_beam_headlight that is activated is reduced to low beam headlight within 5 seconds.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(F{t=5}(Q))] )
					MTL-Formula: G( [(recognize(the camera, the lights of an RCMTECHTERM_advancing_vehicle))] ==> [(F{t=5}(the RCMTECHTERM_high_beam_headlight = low beam headlight))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the camera recognizes the lights of an RCMTECHTERM_advancing_vehicle
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the camera
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the lights of an RCMTECHTERM_advancing_vehicle
							</ArgDetails>
						</Operands>
						<Operator>
							relation:recognizes
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: recognize
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: recognize(the camera, the lights of an RCMTECHTERM_advancing_vehicle)
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_high_beam_headlight is reduced to low beam headlight
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_high_beam_headlight
								<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the RCMTECHTERM_high_beam_headlight
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is activated
								</Operator>
								Has valid-time:  false
								Is negatted: false
								<FormalSemantic>
									LHS: Arg[0].crrStatus
									RHS: activate
									TechnicalOperator: =
									PredicateFormal: the RCMTECHTERM_high_beam_headlight.crrStatus = activate
								</FormalSemantic>
							</Condition>
							</HiddenConstraint>
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: low beam headlight
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is reduced
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_high_beam_headlight = low beam headlight
						</FormalSemantic>
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 5
							Unit: seconds
							QPRelation: null
						<FormalSemantic>
							TechnicalOperator: =
							Value: 5
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-25:]
		text: if the darkness switch is activated, the RCMTECHTERM_cornering_light is not activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the darkness switch is activated, the RCMTECHTERM_cornering_light is not activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(the darkness switch.crrStatus = activate)] ==> [(¬the RCMTECHTERM_cornering_light.crrStatus = activate)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the darkness switch is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the darkness switch
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the darkness switch.crrStatus = activate
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_cornering_light is not activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_cornering_light
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_cornering_light.crrStatus = activate
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-35:]
		text:  if  the RCMTECHTERM_pitman_arm is pulled, the RCMTECHTERM_high_beam_headlight is activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if  the RCMTECHTERM_pitman_arm is pulled, the RCMTECHTERM_high_beam_headlight is activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_pitman_arm.crrStatus = pulled)] ==> [(the RCMTECHTERM_high_beam_headlight.crrStatus = activated)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_pitman_arm is pulled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_pitman_arm
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is pulled
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: pulled
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_pitman_arm.crrStatus = pulled
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_high_beam_headlight is activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_high_beam_headlight
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activated
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_high_beam_headlight.crrStatus = activated
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-23:]
		text: if the light rotary switch is RCMVAL_automatic, the low beam headlights are activated for at least 3 seconds when the exterior brightness is lower than a threshold RCMVAR_s1. if the exterior brightness exceeds a threshold RCMVAR_s2 that exceeds RCMVAR_s1, the low beam headlights are deactivated for at least 3 seconds.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the light rotary switch is RCMVAL_automatic, the low beam headlights are activated for at least 3 seconds when the exterior brightness is lower than a threshold RCMVAR_s1.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [([(P)] ==> [(Q)])] ==> [(G{t>=3}(R))] )
					MTL-Formula: G( [([(the exterior brightness = lower)] ==> [(the light rotary switch = RCMVAL_automatic)])] ==> [(G{t>=3}(the low beam headlights.crrStatus = activate))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the light rotary switch is RCMVAL_automatic
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the light rotary switch
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_automatic
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the light rotary switch = RCMVAL_automatic
						</FormalSemantic>
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the exterior brightness is lower
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the exterior brightness
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: lower
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the exterior brightness = lower
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the low beam headlights are activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the low beam headlights
							</ArgDetails>
						</Operands>
						<Operator>
							relation:are activated
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: >=
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the low beam headlights.crrStatus = activate
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [2]
				text:  if the exterior brightness exceeds a threshold RCMVAR_s2 that exceeds RCMVAR_s1, the low beam headlights are deactivated for at least 3 seconds.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(G{t>=3}(Q))] )
					MTL-Formula: G( [(the exterior brightness > RCMVAR_s2)] ==> [(G{t>=3}(the low beam headlights.crrStatus = deactivate))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the exterior brightness exceeds a RCMVAR_s2
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the exterior brightness
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: a RCMVAR_s2
								<HiddenConstraint>
							<Condition>
								Keyword: null
								Text = null
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: a RCMVAR_s2
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAR_s1
									</ArgDetails>
								</Operands>
								<Operator>
									relation:exceeds
								</Operator>
								Has valid-time:  false
								Is negatted: false
								<FormalSemantic>
									LHS: Arg[0]
									RHS: Arg[1]
									TechnicalOperator: >
									PredicateFormal: RCMVAR_s2 > RCMVAR_s1
								</FormalSemantic>
							</Condition>
							</HiddenConstraint>
							</ArgDetails>
						</Operands>
						<Operator>
							relation:exceeds
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: >
							PredicateFormal: the exterior brightness > RCMVAR_s2
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the low beam headlights are deactivated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the low beam headlights
							</ArgDetails>
						</Operands>
						<Operator>
							relation:are deactivated
						</Operator>
						Has valid-time:  true
						<ValidTime>
							TimeType: Scope
							Value: 3
							Unit: seconds
							QPRelation: at  least
						<FormalSemantic>
							TechnicalOperator: >=
							Value: 3
							</FormalSemantic>
						<ValidTime>
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: deactivate
							TechnicalOperator: =
							PredicateFormal: the low beam headlights.crrStatus = deactivate
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-33:]
		text: if an overvoltage is present, the headlight must be activated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if an overvoltage is present, the headlight must be activated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(an overvoltage = present)] ==> [(the headlight.crrStatus = activate)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if an overvoltage is present
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: an overvoltage
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: present
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: an overvoltage = present
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the headlight must be activated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the headlight
							</ArgDetails>
						</Operands>
						<Operator>
							relation:must be activated
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0].crrStatus
							RHS: activate
							TechnicalOperator: =
							PredicateFormal: the headlight.crrStatus = activate
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-21:]
		text: the driver activates the low beam headlights when turning the light rotary switch to RCMVAL_exterior_lights_on.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the driver activates the low beam headlights when turning the light rotary switch to RCMVAL_exterior_lights_on.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the light rotary switch = RCMVAL_exterior_lights_on)] ==> [(activate(the driver, the low beam headlights))] )
				</Formal-Representation>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when turning the light rotary switch to RCMVAL_exterior_lights_on
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the light rotary switch
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_exterior_lights_on
							</ArgDetails>
						</Operands>
						<Operator>
							relation:turning
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the light rotary switch = RCMVAL_exterior_lights_on
						</FormalSemantic>
						is repeated = false
					</Trigger>
					<Action>
						Text = the driver activates the low beam headlights
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the driver
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the low beam headlights
							</ArgDetails>
						</Operands>
						<Operator>
							relation:activates
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							ProcessName: activate
							OperandList: {Arg[1], Arg[2]}
							PredicateFormal: activate(the driver, the low beam headlights)
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-31:]
		text: if a subvoltage is present, the RCMTECHTERM_cornering_light should not be available.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if a subvoltage is present, the RCMTECHTERM_cornering_light should not be available.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(¬Q)] )
					MTL-Formula: G( [(a subvoltage = present)] ==> [(¬the RCMTECHTERM_cornering_light = available)] )
				</Formal-Representation>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if a subvoltage is present
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a subvoltage
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: present
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: a subvoltage = present
						</FormalSemantic>
					</Condition>
					<Action>
						Text = the RCMTECHTERM_cornering_light should not be available
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_cornering_light
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: available
							</ArgDetails>
						</Operands>
						<Operator>
							relation:should be
						</Operator>
						Has valid-time:  false
						Is negatted: true
						<FormalSemantic>
							LHS: Arg[0]
							RHS: Arg[1]
							TechnicalOperator: =
							PredicateFormal: the RCMTECHTERM_cornering_light = available
						</FormalSemantic>
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

</SucceededRequirement>
</log>
