@inproceedings{conrad_compositional_2022,
	address = {New York, NY, USA},
	series = {{CPP} 2022},
	title = {A {Compositional} {Proof} {Framework} for {FRETish} {Requirements}},
	isbn = {978-1-4503-9182-5},
	url = {https://doi.org/10.1145/3497775.3503685},
	doi = {10.1145/3497775.3503685},
	abstract = {Structured natural languages provide a trade space between ambiguous natural languages that make up most written requirements, and mathematical formal specifications such as Linear Temporal Logic. FRETish is a structured natural language for the elicitation of system requirements developed at NASA. The related open-source tool Fret provides support for translating FRETish requirements into temporal logic formulas that can be input to several verification and analysis tools. In the context of safety-critical systems, it is crucial to ensure that a generated formula captures the semantics of the corresponding FRETish requirement precisely. This paper presents a rigorous formalization of the FRETish language including a new denotational semantics and a proof of semantic equivalence between FRETish specifications and their temporal logic counterparts computed by Fret. The complete formalization and the proof have been developed in the Prototype Verification System (PVS) theorem prover.},
	booktitle = {Proceedings of the 11th {ACM} {SIGPLAN} {International} {Conference} on {Certified} {Programs} and {Proofs}},
	publisher = {Association for Computing Machinery},
	author = {Conrad, Esther and Titolo, Laura and Giannakopoulou, Dimitra and Pressburger, Thomas and Dutle, Aaron},
	year = {2022},
	note = {event-place: Philadelphia, PA, USA},
	keywords = {Formal specification, Natural languages, Semantics, Temporal logic, Linear temporal logic, Model checking, Formal verification, Computer circuits, Safety engineering, Formalisation, NASA, Requirement, Formal proofs, Formal Proofs, Metric temporal logic, Metric Temporal Logic, Open systems, Prototype verification systems, PVS, Requirements, Space between, Structured natural language, Structured Natural Language, Trade space},
	pages = {68--81},
	annote = {Cited by: 4; Conference name: 11th ACM SIGPLAN International Conference on Certified Programs and Proofs, CPP 2022 - co-located with POPL 2022; Conference date: 17 January 2022 through 18 January 2022; Conference code: 176264; All Open Access, Green Open Access},
	annote = {Cited by: 6; Conference name: 11th ACM SIGPLAN International Conference on Certified Programs and Proofs, CPP 2022 - co-located with POPL 2022; Conference date: 17 January 2022 through 18 January 2022; Conference code: 176264; All Open Access, Green Open Access},
	annote = {RELEVANCE: HIGH
},
}


@inproceedings{farrell_fretting_2022,
	address = {Berlin, Heidelberg},
	title = {{FRETting} {About} {Requirements}: {Formalised} {Requirements} {For}\&nbsp;an\&nbsp;{Aircraft} {Engine} {Controller}},
	isbn = {978-3-030-98463-2},
	url = {https://doi.org/10.1007/978-3-030-98464-9_9},
	doi = {10.1007/978-3-030-98464-9_9},
	abstract = {[Context \&amp; motivation] Eliciting requirements that are detailed and logical enough to be amenable to formal verification is a difficult task. Multiple tools exist for requirements elicitation and some of these also support formalisation of requirements in a way that is useful for formal methods. [Question/problem] This paper reports on our experience of using the Formal Requirements Elicitation Tool (FRET) alongside our industrial partner. The use case that we investigate is an aircraft engine controller. In this context, we evaluate the use of FRET to bridge the communication gap between formal methods experts and aerospace industry specialists. [Principal ideas/results] We describe our journey from ambiguous, natural-language requirements to concise, formalised FRET requirements. We include our analysis of the formalised requirements from the perspective of patterns, translation into other formal methods and the relationship between parent-child requirements in this set. We also provide insight into lessons learned throughout this process and identify future improvements to FRET. [Contribution] Previous experience reports have been published by the FRET team, but this is the first such report of an industrial use case that was written by researchers that have not been involved FRET’s development.},
	booktitle = {Requirements {Engineering}: {Foundation} for {Software} {Quality}: 28th {International} {Working} {Conference}, {REFSQ} 2022, {Birmingham}, {UK}, {March} 21–24, 2022, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Farrell, Marie and Luckcuck, Matt and Sheridan, Oisín and Monahan, Rosemary},
	year = {2022},
	note = {event-place: Birmingham, United Kingdom},
	keywords = {Formal requirements, FRET, Traceability},
	pages = {96--111},
	annote = {RELEVANCE: HIGH
},
}


@inproceedings{perez_automated_2022,
	address = {Berlin, Heidelberg},
	title = {Automated {Translation} of {Natural} {Language} {Requirements} to {Runtime} {Monitors}},
	isbn = {978-3-030-99523-2},
	url = {https://doi.org/10.1007/978-3-030-99524-9_21},
	doi = {10.1007/978-3-030-99524-9_21},
	abstract = {Runtime verification (RV) enables monitoring systems at runtime, to detect property violations early and limit their potential consequences. This paper presents an end-to-end framework to capture requirements in structured natural language and generate monitors that capture their semantics faithfully. We leverage NASA’s Formal Requirement Elicitation Tool (fret), and the RV system Copilot. We extend fret with mechanisms to capture additional information needed to generate monitors, and introduce Ogma, a new tool to bridge the gap between fret and Copilot. With this framework, users can write requirements in an intuitive format and obtain real-time C monitors suitable for use in embedded systems. Our toolchain is available as open source.},
	booktitle = {Tools and {Algorithms} for the {Construction} and {Analysis} of {Systems}: 28th {International} {Conference}, {TACAS} 2022, {Held} as {Part} of the {European} {Joint} {Conferences} on {Theory} and {Practice} of {Software}, {ETAPS} 2022, {Munich}, {Germany}, {April} 2–7, 2022, {Proceedings}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Perez, Ivan and Mavridou, Anastasia and Pressburger, Tom and Goodloe, Alwyn and Giannakopoulou, Dimitra},
	year = {2022},
	note = {event-place: Munich, Germany},
	pages = {387--395},
	annote = {RELEVANCE: HIGH

},
}


@inproceedings{li_formalization_2023,
	address = {Berlin, Heidelberg},
	title = {Formalization of {Natural} {Language} into {PPTL} {Specification} via {Neural} {Machine} {Translation}},
	isbn = {978-3-031-29475-4},
	url = {https://doi.org/10.1007/978-3-031-29476-1_7},
	doi = {10.1007/978-3-031-29476-1_7},
	abstract = {Propositional Projection Temporal Logic (PPTL) has been widely used in formal verification, and its expressiveness is suitable for the description of security requirements. However, the expression and application of temporal logic formulas rely on a strong mathematical background, which is difficult for non-domain experts, thus bridging the chasm between natural language descriptions and formal languages is urgently needed. This paper proposes an innovative architecture for neural machine automatic translation named NL2PPTL, which transforms natural language into PPTL specification via utilizing data preprocessing, encoder-decoder network and stack sequentially. To evaluate the performance of our method, the experimental verification is realized on real datasets. The experiment conducted shows that our method has effectiveness on temporal logic specification generation.},
	booktitle = {Structured {Object}-{Oriented} {Formal} {Language} and {Method}: 11th {International} {Workshop}, {SOFL}+{MSVL} 2022, {Madrid}, {Spain}, {October} 24, 2022, {Revised} {Selected} {Papers}},
	publisher = {Springer-Verlag},
	author = {Li, Chunyi and Chang, Jiajun and Wang, Xiaobing and Zhao, Liang and Mao, Wenjie},
	year = {2023},
	note = {event-place: Madrid, Spain},
	keywords = {Formal specification, Formal verification, Neural machine translation, Propositional projection temporal logic},
	pages = {79--92},
	annote = {RELEVANCE: HIGH
},
}


@inproceedings{ye_natural_2022,
	title = {A {Natural} {Language} {Instruction} {Disambiguation} {Method} for {Robot} {Grasping}},
	url = {https://doi.org/10.1109/ROBIO54168.2021.9739456},
	doi = {10.1109/ROBIO54168.2021.9739456},
	abstract = {Robot grasping under the instruction of natural language has attracted increasing attention in various applications for its advantages in enabling natural and smooth human-robot interaction. At present, mainstream algorithms mainly solve problems of utilizing simple natural language instructions to guide the robot arm to perform some specific grasping. However, for two natural language instructions with different temporal logic and the same semantics, it is usually difficult for the robot to achieve semantic disambiguation, which further leads to the failure of the grasping task. In order to address this problem, we propose a new natural language instruction disambiguation method for robot grasping by combining sentence vector similarity calculation model and sentence temporal logic model. Firstly, the word vector is obtained through the Skip-gram model in Word2vec and a sentence vector is constructed. The semantic similarity of the sentence is then calculated by using the proposed cost function. Based on the semantic similarity of the sentence, the correct temporal logic form of the sentence is then extracted according to the temporal adverbial priority to further guide the grabbing process of the robot arm. The experimental results show that our method can successfully realize the semantic disambiguation for natural language instructions with different temporal logics and the same semantics, and further guide the robot arm to complete more complicated tasks than previous tasks.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Robotics} and {Biomimetics} ({ROBIO})},
	publisher = {IEEE Press},
	author = {Ye, Rongguang and Xu, Qingchuan and Liu, Jie and Hong, Yang and Sun, Chengfeng and Chi, Wenzheng and Sun, Lining},
	year = {2022},
	note = {Place: Sanya, China},
	keywords = {Natural languages, Semantics, Temporal logic, Calculations, Computer circuits, Cost functions, Human robot interaction, Robotics, Disambiguation method, Natural language instruction, Robot arms, Robot grasping, Robotic arms, Semantic disambiguation, Semantic similarity, Sentence vector similarity calculation, Similarity calculation, Vector similarity, Vectors},
	pages = {601--606},
	annote = {Cited by: 1; Conference name: 2021 IEEE International Conference on Robotics and Biomimetics, ROBIO 2021; Conference date: 27 December 2021 through 31 December 2021; Conference code: 178223},
	annote = {Cited by: 1; Conference name: 2021 IEEE International Conference on Robotics and Biomimetics, ROBIO 2021; Conference date: 27 December 2021 through 31 December 2021; Conference code: 178223},
	annote = {RELEVANCE: HIGH
},
}


@inproceedings{bugayenko_combining_2021,
	address = {New York, NY, USA},
	series = {{BCNC} 2021},
	title = {Combining {Object}-{Oriented} {Paradigm} and {Controlled} {Natural} {Language} for {Requirements} {Specification}},
	isbn = {978-1-4503-9125-2},
	url = {https://doi.org/10.1145/3486949.3486963},
	doi = {10.1145/3486949.3486963},
	abstract = {Natural language is the dominant form of writing software requirements. Its essential ambiguity causes inconsistency of requirements, which leads to scope creep. On the other hand, formal requirements specification notations such as Z, Petri Nets, SysML, and others are difficult to understand by non-technical project stakeholders. They often become a barrier between developers and requirements providers. The article presents a controlled natural language that looks like English but is a strongly typed object-oriented language compiled to UML/XMI. Thus, it is easily understood, at the same time, by non-technical people, programmers, and computers. Moreover, it is formally verifiable and testable. It was designed, developed, and tested in three commercial software projects in order to validate the assumption that object-oriented design can be applied to requirements engineering at the level of specifications writing. The article outlines key features of the language and summarizes the experience obtained during its practical application.},
	booktitle = {Proceedings of the 1st {ACM} {SIGPLAN} {International} {Workshop} on {Beyond} {Code}: {No} {Code}},
	publisher = {Association for Computing Machinery},
	author = {Bugayenko, Yegor},
	year = {2021},
	note = {event-place: Chicago, IL, USA},
	keywords = {Petri nets, Natural language processing systems, Natural languages, Requirements engineering, Software requirements, Specifications, Software testing, Requirements specifications, Object oriented programming, Requirement, Controlled natural language, Formal requirement specifications, Requirements, Natural Language Processing, Object-oriented languages, Object-oriented paradigm, Project stakeholders, Technical programme},
	pages = {11--17},
	annote = {Cited by: 1; Conference name: 1st ACM SIGPLAN International Workshop on Beyond Code: No Code, BCNC 2021, co-located with SPLASH 2021; Conference date: 17 October 2021; Conference code: 172642},
	annote = {Cited by: 1; Conference name: 1st ACM SIGPLAN International Workshop on Beyond Code: No Code, BCNC 2021, co-located with SPLASH 2021; Conference date: 17 October 2021; Conference code: 172642},
	annote = {Cited by: 1; Conference name: 1st ACM SIGPLAN International Workshop on Beyond Code: No Code, BCNC 2021, co-located with SPLASH 2021; Conference date: 17 October 2021; Conference code: 172642},
	annote = {Cited by: 1; Conference name: 1st ACM SIGPLAN International Workshop on Beyond Code: No Code, BCNC 2021, co-located with SPLASH 2021; Conference date: 17 October 2021; Conference code: 172642},
	annote = {Cited by: 1; Conference name: 1st ACM SIGPLAN International Workshop on Beyond Code: No Code, BCNC 2021, co-located with SPLASH 2021; Conference date: 17 October 2021; Conference code: 172642},
	annote = {event-place: Chicago, IL, USA},
	annote = {event-place: Chicago, IL, USA},
	annote = {event-place: Chicago, IL, USA},
	annote = {RELEVANCE: MEDIUM

Controlled natural language

},
}


@inproceedings{a_abdelnabi_algorithmic_2021,
	address = {New York, NY, USA},
	series = {{ICEMIS}'21},
	title = {An {Algorithmic} {Approach} for {Generating} {Behavioral} {UML} {Models} {Using} {Natural} {Language} {Processing}},
	isbn = {978-1-4503-9044-6},
	url = {https://doi.org/10.1145/3492547.3492612},
	doi = {10.1145/3492547.3492612},
	abstract = {The process of transformation from informal requirements stated in natural language into a formal specification such as Unified Modeling Language (UML) is an important challenge. User requirements that are expressed in natural language can be very problematic, which makes the requirements analysis a difficult task. In this paper, we propose a method to analyze the natural language requirements and generate sequence and collaboration diagrams from these requirements, which are commonly used to describe the behavior of software systems. A case study was accomplished to compare the diagrams generated by the proposed approach to the diagrams produced by other approaches. The results showed that the elements of the sequence and collaboration diagrams extracted through our approach are very satisfactory and they would be acceptable as initial analysis models.},
	booktitle = {The 7th {International} {Conference} on {Engineering} \&amp; {MIS} 2021},
	publisher = {Association for Computing Machinery},
	author = {A. Abdelnabi, Esra and M. Maatuk, Abdelsalam and M. Abdelaziz, Tawfig},
	year = {2021},
	note = {event-place: Almaty, Kazakhstan},
	keywords = {Natural language processing systems, Natural languages, User requirements, Unified Modeling Language, Requirement analysis, Language model, Algorithmic approach, Algorithmic languages, Collaboration diagram, Graphic methods, Informal requirements, NLP tools, Sequence and Collaboration diagrams, Sequence diagrams, UML diagrams, Unified modeling language diagrams},
	annote = {Cited by: 3; Conference name: 7th International Conference on Engineering and MIS, ICEMIS 2021; Conference date: 11 October 2021 through 13 October 2021; Conference code: 175544},
	annote = {Cited by: 4; Conference name: 7th International Conference on Engineering and MIS, ICEMIS 2021; Conference date: 11 October 2021 through 13 October 2021; Conference code: 175544},
	annote = {RELEVANCE: HIGH
},
}


@inproceedings{zhang_automated_2020,
	address = {San Jose, CA, USA},
	series = {{DATE} '20},
	title = {Automated {Generation} of {LTL} {Specifications} for {Smart} {Home} {IoT} {Using} {Natural} {Language}},
	isbn = {978-3-9819263-4-7},
	abstract = {Ordinary users can build their smart home automation system easily nowadays, but such user-customized systems could be error-prone. Using formal verification to prove the correctness of such systems is necessary. However, to conduct formal proof, formal specifications such as Linear Temporal Logic (LTL) formulas have to be provided, but ordinary users cannot author LTL formulas but only natural language.To address this problem, this paper presents a novel approach that can automatically generate formal LTL specifications from natural language requirements based on domain knowledge and our proposed ambiguity refining techniques. Experimental results show that our approach can achieve a high correctness rate of 95.4\% in converting natural language sentences into LTL formulas from 481 requirements of real examples.},
	booktitle = {Proceedings of the 23rd {Conference} on {Design}, {Automation} and {Test} in {Europe}},
	publisher = {EDA Consortium},
	author = {Zhang, Shiyu and Zhai, Juan and Bu, Lei and Chen, Mingsong and Wang, Linzhang and Li, Xuandong},
	year = {2020},
	note = {event-place: Grenoble, France},
	keywords = {Natural language processing systems, Formal specification, Natural languages, Temporal logic, Natural language requirements, Linear temporal logic, Internet of things, Automated generation, Automation, Formal proofs, Correctness rates, Domain knowledge, Real example},
	pages = {622--625},
	annote = {Cited by: 8; Conference name: 2020 Design, Automation and Test in Europe Conference and Exhibition, DATE 2020; Conference date: 9 March 2020 through 13 March 2020; Conference code: 161220},
	annote = {Cited by: 8; Conference name: 2020 Design, Automation and Test in Europe Conference and Exhibition, DATE 2020; Conference date: 9 March 2020 through 13 March 2020; Conference code: 161220},
	annote = {Cited by: 12; Conference name: 2020 Design, Automation and Test in Europe Conference and Exhibition, DATE 2020; Conference date: 9 March 2020 through 13 March 2020; Conference code: 161220},
	annote = {Cited by: 12; Conference name: 2020 Design, Automation and Test in Europe Conference and Exhibition, DATE 2020; Conference date: 9 March 2020 through 13 March 2020; Conference code: 161220},
	annote = {event-place: Grenoble, France},
	annote = {RELEVANCE: HIGH
},
	annote = {Type: Conference paper},
}


@article{moitra_automating_2019,
	title = {Automating {Requirements} {Analysis} and {Test} {Case} {Generation}},
	volume = {24},
	issn = {0947-3602},
	url = {https://doi.org/10.1007/s00766-019-00316-x},
	doi = {10.1007/s00766-019-00316-x},
	abstract = {Writing clear and unambiguous requirements that are conflict-free and complete is no easy task. Incorrect requirements lead to errors being introduced early in the design process. The longer the gap between error introduction and error discovery, the higher the cost associated with the error. To address the growing cost of system development, we introduce a tool called Analysis of Semantic Specifications and Efficient generation of Requirements-based Tests (ASSERT™) for capturing requirements, backed by a formal requirements analysis engine. ASSERT also automatically generates a complete set of requirements-based test cases. The requirements are captured in a structured natural language that is both human- and machine-readable. Formal analysis of these requirements with an automated theorem prover identifies errors as soon as requirements are written. It also addresses the historical problem that analysis engines are hard to use and understand for someone without formal methods expertise and analysis results are often difficult for the end-user to understand and make actionable. ASSERT's major contribution is to bring powerful requirements capture and analysis capability to the domain of the end-user. We provide explainable and automated formal analysis, something we found important for a tool's adoptability in industry. Automating test case generation in ASSERT also provides clear and measurable productivity gains in system development.},
	number = {3},
	journal = {Requir. Eng.},
	author = {Moitra, Abha and Siu, Kit and Crapo, Andrew W. and Durling, Michael and Li, Meng and Manolios, Panagiotis and Meiners, Michael and Mcmillan, Craig},
	month = sep,
	year = {2019},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Testing, Requirements engineering, Semantics, Ontology, Formal methods, Requirements analysis, Requirements formalizations, Automation, Engines, Analysis capabilities, Automated formal analysis, Automated requirements-based test generation, Automated theorem prover, Cost benefit analysis, Errors, Formal analysis, Formal analysis of requirements, Productivity, Requirements formalization, Semantic specification, Test generations},
	pages = {341--364},
	annote = {Cited by: 11},
	annote = {Cited by: 11},
	annote = {Cited by: 11},
	annote = {Cited by: 11},
	annote = {Cited by: 13},
	annote = {Place: Berlin, Heidelberg Publisher: Springer-Verlag},
	annote = {Place: Berlin, Heidelberg Publisher: Springer-Verlag},
	annote = {Place: Berlin, Heidelberg Publisher: Springer-Verlag},
	annote = {RELEVANCE: HIGH

Until 2018, NLP techniques were barely used: Transformation techniques Fig. 8
},
}


@inproceedings{hsiung_generalizing_2022,
	title = {Generalizing to {New} {Domains} by {Mapping} {Natural} {Language} to {Lifted} {LTL}},
	url = {https://doi.org/10.1109/ICRA46639.2022.9812169},
	doi = {10.1109/ICRA46639.2022.9812169},
	abstract = {Recent work on using natural language to specify commands to robots has grounded that language to LTL. However, mapping natural language task specifications to LTL task specifications using language models require probability distributions over finite vocabulary. Existing state-of-the-art methods have extended this finite vocabulary to include unseen terms from the input sequence to improve output generalization. However, novel out-of-vocabulary atomic propositions cannot be generated using these methods. To overcome this, we introduce an intermediate contextual query representation which can be learned from single positive task specification examples, associating a contextual query with an LTL template. We demonstrate that this intermediate representation allows for generalization over unseen object references, assuming accurate groundings are available. We compare our method of mapping natural language task specifications to intermediate contextual queries against state-of-the-art CopyNet models capable of translating natural language to LTL, by evaluating whether correct LTL for manipulation and navigation task specifications can be output, and show that our method outperforms the CopyNet model on unseen object references. We demonstrate that the grounded LTL our method outputs can be used for planning in a simulated OO-MDP environment. Finally, we discuss some common failure modes encountered when translating natural language task specifications to grounded LTL.},
	booktitle = {2022 {International} {Conference} on {Robotics} and {Automation} ({ICRA})},
	publisher = {IEEE Press},
	author = {Hsiung, Eric and Mehta, Hiloni and Chu, Junchi and Liu, Xinyu and Patel, Roma and Tellex, Stefanie and Konidaris, George},
	year = {2022},
	note = {Place: Philadelphia, PA, USA},
	keywords = {Natural languages, Mapping, Specifications, Task specifications, Translation (languages), Language model, Atomic propositions, Generalisation, Input sequence, Linearization, Object reference, Probability distributions, Probability: distributions, Query representations, State-of-the-art methods},
	pages = {3624--3630},
	annote = {Cited by: 3; Conference name: 39th IEEE International Conference on Robotics and Automation, ICRA 2022; Conference date: 23 May 2022 through 27 May 2022; Conference code: 180851; All Open Access, Green Open Access},
	annote = {Cited by: 3; Conference name: 39th IEEE International Conference on Robotics and Automation, ICRA 2022; Conference date: 23 May 2022 through 27 May 2022; Conference code: 180851; All Open Access, Green Open Access},
	annote = {RELEVANCE: HIGH

},
}


@article{gavran_interactive_2020,
	title = {Interactive {Synthesis} of {Temporal} {Specifications} from {Examples} and {Natural} {Language}},
	volume = {4},
	url = {https://doi.org/10.1145/3428269},
	doi = {10.1145/3428269},
	abstract = {Motivated by applications in robotics, we consider the task of synthesizing linear temporal logic (LTL) specifications based on examples and natural language descriptions. While LTL is a flexible, expressive, and unambiguous language to describe robotic tasks, it is often challenging for non-expert users. In this paper, we present an interactive method for synthesizing LTL specifications from a single example trace and a natural language description. The interaction is limited to showing a small number of behavioral examples to the user who decides whether or not they exhibit the original intent. Our approach generates candidate LTL specifications and distinguishing examples using an encoding into optimization modulo theories problems. Additionally, we use a grammar extension mechanism and a semantic parser to generalize synthesized specifications to parametric task descriptions for subsequent use. Our implementation in the tool LtlTalk starts with a domain-specific language that maps to a fragment of LTL and expands it through example-based user interactions, thus enabling natural language-like robot programming, while maintaining the expressive power and precision of a formal language. Our experiments show that the synthesis method is precise, quick, and asks only a few questions to the users, and we demonstrate in a case study how LtlTalk generalizes from the synthesized tasks to other, yet unseen, tasks.},
	number = {OOPSLA},
	journal = {Proc. ACM Program. Lang.},
	author = {Gavran, Ivan and Darulova, Eva and Majumdar, Rupak},
	month = nov,
	year = {2020},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {natural language processing, Natural language processing systems, Natural languages, Semantics, Temporal logic, Formal languages, Specifications, Domain specific languages, Problem oriented languages, Robotics, End effectors, Expressive power, Extension mechanisms, Interactive methods, Linear temporal logic specifications, LTL, program synthesis, Robot programming, robots, specification, Synthesis method, Temporal specification},
	annote = {Cited by: 6; All Open Access, Bronze Open Access},
	annote = {Cited by: 7; All Open Access, Bronze Open Access},
	annote = {RELEVANCE: HIGH

They present LTLtalk

In this paper, we present an interactive method for synthesizing LTL specifications from a single example trace and a natural language description.
LTL provides a flexible, expressive, and unambiguous mechanism to describe complex task. Unfortunately, specifying tasks in LTL is challenging for untrained users

First, a synthesis procedure that takes a natural language description of a task and an example execution trace from the user and generates a set of candidate LTL specifications. Second, an interactive loop that uses distinguishing examples to identify the correct LTL specification. Third, a generalization step that eventually learns a parameterized LTL specification. The three components ensure the following properties.

Natural Language Interfaces for Robotics. In an attempt to provide a more natural specificationlanguage for robotics, but keep the precision of a formal language, Kress-Gazit et al. [2008] proposea controlled, natural looking language that matches a fragment of LTL.

cited in:

Learning Linear Temporal Properties for Autonomous Robotic Systems
Differentiable Inference of Temporal Logic Formulas
Formal Specifications from Natural Language

},
}


@article{osama_comprehensive_2022,
	title = {A {Comprehensive} {Requirement} {Capturing} {Model} {Enabling} the {Automated} {Formalisation} of {NL} {Requirements}},
	volume = {4},
	url = {https://doi.org/10.1007/s42979-022-01449-7},
	doi = {10.1007/s42979-022-01449-7},
	abstract = {Formalising natural language (NL) requirements is essential to have formal specifications that enable formal checking and improve the quality of requirements. However, the existing formalisation techniques require engineers to (re)write the system requirements using a set of requirements templates with predefined and limited structure and semantics. The main drawback of using such templates, usually with a fixed format, is the inability to capture diverse requirements outside the scope of the template structure. To address this limitation, a comprehensive reference model is needed to enable capturing key requirement properties regardless of their format, order, or structure. NLP technique can then be used to convert unrestricted NL requirements into the reference model. Using a set of transformation rules, the reference model representing the requirements can be transformed into the target formal notation. In this paper, we introduce requirement capturing model (RCM) to represent NL requirements by adapting to their key properties and without imposing constraints on how the requirements are written. We also implemented a requirements formalisation approach that supports transforming RCM into temporal logic (TL). In addition, we developed an automated similarity checking approach to check the correctness of the constructed RCM structures against the source NL requirements. We carried out extensive evaluation of RCM by comparing it against 15 existing requirements representation approaches on a dataset of 162 requirement sentences. The results show that RCM supports a much wider range of requirements formats compared to any of the existing approaches.},
	number = {1},
	journal = {SN Comput. Sci.},
	author = {Osama, Mohamed and Zaki-Ismail, Aya and Abdelrazek, Mohamed and Grundy, John and Ibrahim, Amani},
	month = nov,
	year = {2022},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Requirement engineering, Requirement formalisation, Requirement modelling, Requirement representation},
	annote = {Cited by: 0},
	annote = {Cited by: 1},
	annote = {RELEVANCE: HIGH
},
}


@article{soavi_legal_2022,
	title = {From {Legal} {Contracts} to {Formal} {Specifications}: {A} {Systematic} {Literature} {Review}},
	volume = {3},
	url = {https://doi.org/10.1007/s42979-022-01228-4},
	doi = {10.1007/s42979-022-01228-4},
	abstract = {The opportunity to automate and monitor the execution of legal contracts is gaining increasing interest in Business and Academia, thanks to the advent of smart contracts, blockchain technologies, and the Internet of Things. A critical issue in developing smart contract systems is the formalization of legal contracts, which are traditionally expressed in natural language with all the pitfalls that this entails. This paper presents a systematic literature review of papers for the main steps related to the transformation of a legal contract expressed in natural language into a formal specification. Key research studies have been identified, classified, and analyzed according to a four-step transformation process: (a) structural and semantic annotation to identify legal concepts in text, (b) identification of relationships among concepts, (c) contract domain modeling, and (d) generation of a formal specification. Each one of these steps poses serious research challenges that have been the subject of research for decades. The systematic review offers an overview of the most relevant research efforts undertaken to address each step and identifies promising approaches, best practices, and existing gaps in the literature.},
	number = {5},
	journal = {SN Comput. Sci.},
	author = {Soavi, Michele and Zeni, Nicola and Mylopoulos, John and Mich, Luisa},
	month = jun,
	year = {2022},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Requirement, Conceptual model, Legal contract, Semantic annotation, Specification, Systematic literature review},
	annote = {Cited by: 4; All Open Access, Green Open Access, Hybrid Gold Open Access},
	annote = {Cited by: 6; All Open Access, Green Open Access, Hybrid Gold Open Access},
	annote = {RELEVANCE: HIGH
},
}


@article{bombieri_mapping_2023,
	title = {Mapping natural language procedures descriptions to linear temporal logic templates: an application in the surgical robotic domain},
	volume = {53},
	issn = {0924669X},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85168563884&doi=10.1007%2fs10489-023-04882-0&partnerID=40&md5=ca7b984a2effef53e105490cf558f48a},
	doi = {10.1007/s10489-023-04882-0},
	abstract = {Natural language annotations and manuals can provide useful procedural information and relations for the highly specialized scenario of autonomous robotic task planning. In this paper, we propose and publicly release AUTOMATE, a pipeline for automatic task knowledge extraction from expert-written domain texts. AUTOMATE integrates semantic sentence classification, semantic role labeling, and identification of procedural connectors, in order to extract templates of Linear Temporal Logic (LTL) relations that can be directly implemented in any sufficiently expressive logic programming formalism for autonomous reasoning, assuming some low-level commonsense and domain-independent knowledge is available. This is the first work that bridges natural language descriptions of complex LTL relations and the automation of full robotic tasks. Unlike most recent similar works that assume strict language constraints in substantially simplified domains, we test our pipeline on texts that reflect the expressiveness of natural language used in available textbooks and manuals. In fact, we test AUTOMATE in the surgical robotic scenario, defining realistic language constraints based on a publicly available dataset. In the context of two benchmark training tasks with texts constrained as above, we show that automatically extracted LTL templates, after translation to a suitable logic programming paradigm, achieve comparable planning success in reduced time, with respect to logic programs written by expert programmers. © 2023, The Author(s).},
	language = {English},
	number = {22},
	journal = {Applied Intelligence},
	author = {Bombieri, Marco and Meli, Daniele and Dall’Alba, Diego and Rospocher, Marco and Fiorini, Paolo},
	year = {2023},
	note = {Publisher: Springer
Type: Article},
	keywords = {Natural language processing systems, Natural languages, Semantics, Temporal logic, Linear temporal logic, Computer circuits, Translation (languages), Logic programming, Language processing, Natural language processing, Statistical tests, Robot programming, Pipelines, Program translators, Autonomous planning, Autonomous robotics, Logic-programming, Robotic surgery, Robotic tasks, Surgical robotics, Task planning},
	pages = {26351 -- 26363},
	annote = {Cited by: 0; All Open Access, Hybrid Gold Open Access},
	annote = {Cited by: 0; All Open Access, Hybrid Gold Open Access},
	annote = {Place: USA Publisher: Kluwer Academic Publishers},
	annote = {Place: USA Publisher: Kluwer Academic Publishers},
	annote = {RELEVANCE: HIGH
},
}


@inproceedings{fuggitti_nl2ltl_2023,
	title = {{NL2LTL} - {A} {Python} {Package} for {Converting} {Natural} {Language} ({NL}) {Instructions} to {Linear} {Temporal} {Logic} ({LTL}) {Formulas}},
	volume = {37},
	isbn = {978-1-57735-880-0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85162164607&partnerID=40&md5=e447cb9c369935ba15401c6d54471d1d},
	abstract = {This is a demonstration of our newly released Python package NL2LTL which leverages the latest in natural language understanding (NLU) and large language models (LLMs) to translate natural language instructions to linear temporal logic (LTL) formulas. This allows direct translation to formal languages that a reasoning system can use, while at the same time, allowing the end-user to provide inputs in natural language without having to understand any details of an underlying formal language. The package comes with support for a set of default LTL patterns, corresponding to popular DECLARE templates, but is also fully extensible to new formulas and user inputs. The package is open-source and is free to use for the AI community under the MIT license. Open Source: https://github.com/IBM/nl2ltl. Video Link: https://bit.ly/3dHW5b1. Copyright © 2023, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.},
	language = {English},
	booktitle = {Proceedings of the 37th {AAAI} {Conference} on {Artificial} {Intelligence}, {AAAI} 2023},
	publisher = {AAAI Press},
	author = {Fuggitti, Francesco and Chakraborti, Tathagata},
	editor = {B, Williams and Y, Chen and J, Neville},
	year = {2023},
	keywords = {Natural languages, Temporal logic, Artificial intelligence, Formal languages, Linear temporal logic, Computer circuits, Translation (languages), Temporal logic formula, Language model, Natural language understanding, End-users, High level languages, HTTP, Logic patterns, Open-source, Python, Reasoning system, User input},
	pages = {16428 -- 16430},
	annote = {Cited by: 1},
	annote = {Cited by: 1; Conference name: 37th AAAI Conference on Artificial Intelligence, AAAI 2023; Conference date: 7 February 2023 through 14 February 2023; Conference code: 190493},
	annote = {Cited by: 5; Conference name: 37th AAAI Conference on Artificial Intelligence, AAAI 2023; Conference date: 7 February 2023 through 14 February 2023; Conference code: 190493},
	annote = {Cited by: 5; Conference name: 37th AAAI Conference on Artificial Intelligence, AAAI 2023; Conference date: 7 February 2023 through 14 February 2023; Conference code: 190493},
	annote = {RELEVANCE: HIGH

https://bit.ly/3dHW5b1 -{\textgreater} video demo

it has industry appication

},
	annote = {Type: Conference paper},
}


@article{ye_probabilistic_2022,
	title = {Probabilistic modelling and verification using {RoboChart} and {PRISM}},
	volume = {21},
	issn = {1619-1366},
	url = {https://doi.org/10.1007/s10270-021-00916-8},
	doi = {10.1007/s10270-021-00916-8},
	abstract = {RoboChart is a timed domain-specific language for robotics, distinctive in its support for automated verification by model checking and theorem proving. Since uncertainty is an essential part of robotic systems, we present here an extension to RoboChart to model uncertainty using probabilism. The extension enriches RoboChart state machines with probability through a new construct: probabilistic junctions as the source of transitions with a probability value. RoboChart has an accompanying tool, called RoboTool, for modelling and verification of functional and real-time behaviour. We present here also an automatic technique, implemented in RoboTool, to transform a RoboChart model into a PRISM model for verification. We have extended the property language of RoboTool so that probabilistic properties expressed in temporal logic can be written using controlled natural language.},
	number = {2},
	journal = {Softw. Syst. Model.},
	author = {Ye, Kangfeng and Cavalcanti, Ana and Foster, Simon and Miyazawa, Alvaro and Woodcock, Jim},
	month = apr,
	year = {2022},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Semantics, Formal Semantics, Model checking, Formal methods, Modeling languages, Problem oriented languages, Automated verification, Domain-specific language for robotic, Domain-specific language for robotics, Formal semantics, Model transformation, Modeling and verifications, PRISM, Prisms, Probabilistic model checking, Probabilistic model-checking, Probabilistic models, Probabilistic verification, Robotics, State machines, State-machine, Uncertainty analysis},
	pages = {667--716},
	annote = {Cited by: 8; All Open Access, Green Open Access, Hybrid Gold Open Access},
	annote = {Cited by: 12; All Open Access, Green Open Access, Hybrid Gold Open Access},
	annote = {RELEVANCE: MEDIUM - just for the idea

Since uncertainty is an essential part of robotic systems, we present here an extension to RoboChart to model uncertainty using probabilistic.
},
}


@inproceedings{lin_road_2022,
	title = {Road {Traffic} {Law} {Adaptive} {Decision}-making for {Self}-{Driving} {Vehicles}},
	url = {https://doi.org/10.1109/ITSC55140.2022.9922208},
	doi = {10.1109/ITSC55140.2022.9922208},
	abstract = {Self-driving vehicles have their own intelligence to drive on open roads. However, vehicle managers, e.g., government or industrial companies, still need a way to tell these self-driving vehicles what behaviors are encouraged or forbidden. Unlike human drivers, current self-driving vehicles cannot understand the traffic laws, and thus rely on the programmers manually writing the corresponding principles into the driving systems. It would be less efficient and hard to adapt some temporary traffic laws, especially when the vehicles use data-driven decision-making algorithms. Besides, current self-driving vehicle systems rarely take traffic law modification into consideration. This work aims to design a road traffic law adaptive decision-making method. The decision-making algorithm is designed based on reinforcement learning, in which the traffic rules are usually implicitly coded in deep neural networks. The main idea is to supply the adaptability to traffic laws of self-driving vehicles by a law-adaptive backup policy. In this work, the natural language-based traffic laws are first translated into a logical expression by the Linear Temporal Logic method. Then, the system will try to monitor in advance whether the self-driving vehicle may break the traffic laws by designing a long-term RL action space. Finally, a sample-based planning method will re-plan the trajectory when the vehicle may break the traffic rules. The method is validated in a Beijing Winter Olympic Lane scenario and an overtaking case, built in CARLA simulator. The results show that by adopting this method, self-driving vehicles can comply with new issued or updated traffic laws effectively. This method helps self-driving vehicles governed by digital traffic laws, which is necessary for the wide adoption of autonomous driving.},
	booktitle = {2022 {IEEE} 25th {International} {Conference} on {Intelligent} {Transportation} {Systems} ({ITSC})},
	publisher = {IEEE Press},
	author = {Lin, Jiaxin and Zhou, Wenhui and Wang, Hong and Cao, Zhong and Yu, Wenhao and Zhao, Chengxiang and Zhao, Ding and Yang, Diange and Li, Jun},
	year = {2022},
	note = {Place: Macau, China},
	keywords = {Decision making, 'current, Roads and streets, Reinforcement learning, Adaptive decision making, Autonomous vehicles, Decision-making algorithms, Decisions makings, Deep neural networks, Digital storage, Highway planning, Reinforcement learnings, Road traffic, Road vehicles, Self drivings, Self-driving vehicle, Traffic laws, Traffic rules},
	pages = {2034--2041},
	annote = {Cited by: 1; Conference name: 25th IEEE International Conference on Intelligent Transportation Systems, ITSC 2022; Conference date: 8 October 2022 through 12 October 2022; Conference code: 183941; All Open Access, Green Open Access},
	annote = {Cited by: 7; Conference name: 25th IEEE International Conference on Intelligent Transportation Systems, ITSC 2022; Conference date: 8 October 2022 through 12 October 2022; Conference code: 183941; All Open Access, Green Open Access},
	annote = {RELEVANCE: MEDIUM

How can self driving vehicles automatically comply with the temporary road traffic laws, e.g. exclusive winter olympic lane?


Road Traffic Law-Adaptive Decision Making



Traffic Law Digitization using Linear Temporal Logic

aw-violence Forecaster

if max speed of road is 40 km hora y ha recorrido 100km en 1 hora, ha violado temporal constraint?

CARLA simulation

compliance vs violation place


},
}


@article{zaki-ismail_rcm-extractor_2022,
	title = {{RCM}-{Extractor}: {An} {Automated} {NLP}-{Based} {Approach} for {Extracting} a {Semi} {Formal} {Representation} {Model} from {Natural} {Language} {Requirements}},
	volume = {29},
	issn = {0928-8910},
	url = {https://doi.org/10.1007/s10515-021-00312-y},
	doi = {10.1007/s10515-021-00312-y},
	abstract = {Most existing (semi-)automated requirements formalisation techniques assume requirements to be specified in predefined templates. They also employ template-specific transformation rules to provide the corresponding formal representation. Hence, such techniques have limited expressiveness and more importantly require system engineers to re-write their system requirements following defined templates for maintenance and evolution. In this paper, we introduce an automated requirements extraction technique (RCM-Extractor) to automatically extract the key constructs of a comprehensive and formalisable semi-formal representation model from textual requirements. This avoids the expressiveness issues affecting the existing requirement specification templates, and eliminates the need to rewriting the requirements to match the structure of such templates. We evaluated RCM-Extractor on a dataset of 162 requirements curated from several papers in the literature. RCM-Extractor achieved 87\% precision, 98\% recall, 92\% F-measure, and 86\% accuracy. In addition, we evaluated the capabilities of RCM-Extractor to extract requirements on a dataset of 15,000 automatically synthesised requirements that are constructed specifically to evaluate our approach. This dataset has a complete coverage of the possible structures and arrangements of the properties that can exist in system requirements. Our approach achieved 57\%, 92\% and 100\% accuracy for un-corrected, partially-corrected and fully-corrected Stanford typed-dependencies representations of the synthesised requirements, respectively.},
	number = {1},
	journal = {Automated Software Engg.},
	author = {Zaki-Ismail, Aya and Osama, Mohamed and Abdelrazek, Mohamed and Grundy, John and Ibrahim, Amani},
	month = may,
	year = {2022},
	keywords = {Natural language processing systems, Natural languages, Requirements engineering, Extraction, Natural language requirements, Requirements formalizations, Automation, System requirements, Requirement extraction, Requirements formalization, Natural-language extraction, Representation model, Requirements extraction, Semi-formal representations, Synthesised, Transformation rules},
	annote = {Cited by: 4},
	annote = {Cited by: 4},
	annote = {Cited by: 4},
	annote = {Cited by: 4},
	annote = {Cited by: 5},
	annote = {Place: USA Publisher: Kluwer Academic Publishers},
	annote = {Place: USA Publisher: Kluwer Academic Publishers},
	annote = {Place: USA Publisher: Kluwer Academic Publishers},
	annote = {RELEVANCE: HIGH


"Can a semi-formal representation be sufficient?"


"Should NLT be reformatted to a version that can be formalized?"



intro pana y figure

The introduce the concept of valid time to quantify the time constraints, also pre elapsed time and in between time


First, they add an overhead burden on the system engineers to re-write their requirements to con-form to the used template(s) even if the requirements are well written (i.e., haveno quality issues). Second, the user needs guidance to phrase the requirements incompliance with the defined format(s). Third, they reduce the expressiveness powerof the writing. Finally, the format might be so restricted that it becomes irritating touse.

which other semiformal representation exists?

what to do when you consider documents from different domains?
Zaki-Ismail et al. (2021b), we introduced an automated requirements extrac-tion technique (RCM-Extractor)

Additionally, we also utilised a new dataset of 15,000 automatically synthesised requirements covering all the possible structures of the requirement properties to assess the robustness of the developed approaches.

TODO: check out their dataset

ARSENAL first reduces the complexity of the input sentence through term replacement
},
}


@inproceedings{wang_automatic_2020,
	address = {Berlin, Heidelberg},
	title = {Automatic {Generation} of {Specification} from {Natural} {Language} {Based} on {Temporal} {Logic}},
	isbn = {978-3-030-77473-8},
	url = {https://doi.org/10.1007/978-3-030-77474-5_11},
	doi = {10.1007/978-3-030-77474-5_11},
	abstract = {Formal specifications are usually used for describing safety system properties and play an important role in formal verification. In order to improve the effectiveness of formal specification generation and formal verification, this paper proposes a framework for automatic conversion from natural language describing properties to temporal logic formulas, and implements a tool PPTLGenerator (Propositional Projection Temporal Logic formula Generator) for the conversion. First, PPTLGenerator is developed based on JavaCC for automatic conversion from natural language to PPTL. Then, the satisfiability of a PPTL formula generated by PPTLGenerator is checked by a tool PPTLSAT. Finally, to illustrate the principle and effectiveness of the framework, a case study of the safety property of Level 3 autonomous car is provided.},
	booktitle = {Structured {Object}-{Oriented} {Formal} {Language} and {Method}: 10th {International} {Workshop}, {SOFL}+{MSVL} 2020, {Singapore}, {March} 1, 2021, {Revised} {Selected} {Papers}},
	publisher = {Springer-Verlag},
	author = {Wang, Xiaobing and Li, Ge and Li, Chunyi and Zhao, Liang and Shu, Xinfeng},
	year = {2020},
	keywords = {Formal methods, Natural language processing, PPTL, Temporal logic specification},
	pages = {154--171},
	annote = {event-place: Singapore, Singapore},
}


@inproceedings{manas_semantic_2023,
	address = {Berlin, Heidelberg},
	title = {Semantic {Role} {Assisted} {Natural} {Language} {Rule} {Formalization} for\&nbsp;{Intelligent} {Vehicle}},
	isbn = {978-3-031-45071-6},
	url = {https://doi.org/10.1007/978-3-031-45072-3_13},
	doi = {10.1007/978-3-031-45072-3_13},
	abstract = {This paper proposes a novel pipeline to translate natural language rules and instructions for intelligent vehicles into temporal logic. The pipeline uses semantic role labeling (SRL), soft rule-based selection restrictions, and large language models (LLMs) to extract predicates, arguments, and temporal aspects from natural language rules and instruction. We then use the language understanding capability of LLMs to generate temporal logic rules from unstructured natural language text and additional information provided by SRL. We envision our model as a human-in-the-loop system that can facilitate the automated rule formalization for planning and verification systems in automated driving and drone planning. We demonstrate that our method can generate semantically correct temporal logic formulas from natural language text and provide implicit explanations of the output by showing the intermediate reasoning steps involved. This paper illustrates the integration of additional semantic knowledge and LLM and its application for the intelligent system domain of automated driving and drone planning. Our generalizable pipeline can easily extend to new logic formalization types, traffic rules, drone planning instructions, and application domains.},
	booktitle = {Rules and {Reasoning}: 7th {International} {Joint} {Conference}, {RuleML}+{RR} 2023, {Oslo}, {Norway}, {September} 18–20, 2023, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Manas, Kumar and Paschke, Adrian},
	year = {2023},
	keywords = {Knowledge Representation, Intelligent Vehicle, Language Model, Rule Formalization, Semantic Natural Language Processing},
	pages = {175--189},
	annote = {event-place: Oslo, Norway},
}


@inproceedings{pi_automated_2019,
	address = {Berlin, Heidelberg},
	title = {Automated {Mining} and {Checking} of {Formal} {Properties} in {Natural} {Language} {Requirements}},
	isbn = {978-3-030-29562-2},
	url = {https://doi.org/10.1007/978-3-030-29563-9_8},
	doi = {10.1007/978-3-030-29563-9_8},
	abstract = {Bridging the gap between natural language requirements (NLR) and precise formal specifications is a crucial task of knowledge engineering. Software system development has become more complex in recent years, and it includes many requirements in different domains that users need to understand. Many of these requirements are expressed in natural language, which may be incomplete and ambiguous. However, the formal language with its rigorous semantics may accurately represent certain temporal logic properties and allow for automatic validation analysis. It is difficult for software engineers to understand the formal temporal logic from numerous requirements. In this paper, we propose a novel method to automatically mine the linear temporal logic (LTL) from the natural language requirements and check the consistency among different formal properties. We use natural language processing (NLP) to parse requirement sentences and map syntactic dependencies to LTL formulas by using our extraction rules. Also, we apply the automata-based model checking to assess the correctness and consistency of the extracted properties. Through implementation and case studies, we demonstrate that our approach is well suited to deal with the temporal logic requirements upon which the natural language is based.},
	booktitle = {Knowledge {Science}, {Engineering} and {Management}: 12th {International} {Conference}, {KSEM} 2019, {Athens}, {Greece}, {August} 28–30, 2019, {Proceedings}, {Part} {II}},
	publisher = {Springer-Verlag},
	author = {Pi, Xingxing and Shi, Jianqi and Huang, Yanhong and Wei, Hansheng},
	year = {2019},
	pages = {75--87},
	annote = {event-place: Athens, Greece},
}


@inproceedings{cherukuri_towards_2022,
	address = {Berlin, Heidelberg},
	title = {Towards {Explainable} {Formal} {Methods}: {From} {LTL} to {Natural} {Language} with {Neural} {Machine} {Translation}},
	isbn = {978-3-030-98463-2},
	url = {https://doi.org/10.1007/978-3-030-98464-9_7},
	doi = {10.1007/978-3-030-98464-9_7},
	abstract = {[Context and motivation] Requirements formalisation facilitates reasoning about inconsistencies, detection of ambiguities, and identification critical issues in system models. Temporal logic formulae are the natural choice when it comes to formalise requirements associated to desired system behaviours. [Question/problem] Understanding and mastering temporal logic requires a formal background. Means are therefore needed to make temporal logic formulae interpretable by engineers, domain experts and other stakeholders involved in the development process. [Principal ideas/results] In this paper, we propose to use a neural machine translation tool, named OpenNMT, to translate Linear Temporal Logic (LTL) formulae into corresponding natural language descriptions. Our results show that the translation system achieves an average BLEU (BiLingual Evaluation Understudy) score of 93.53\%, which corresponds to high-quality translations. [Contribution] Our neural model can be applied to assess if requirements have been correctly formalised. This can be useful to requirements analysts, who may have limited confidence with LTL, and to other stakeholders involved in the requirements verification process. Overall, our research preview contributes to bridging the gap between formal methods and requirements engineering, and opens to further research in explainable formal methods.},
	booktitle = {Requirements {Engineering}: {Foundation} for {Software} {Quality}: 28th {International} {Working} {Conference}, {REFSQ} 2022, {Birmingham}, {UK}, {March} 21–24, 2022, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Cherukuri, Himaja and Ferrari, Alessio and Spoletini, Paola},
	year = {2022},
	keywords = {Requirements engineering, Temporal logic, Formal methods, Natural language processing, Neural networks, LTL, NLP, Machine translation},
	pages = {79--86},
	annote = {event-place: Birmingham, United Kingdom},
}


@inproceedings{mustroph_verifying_2023,
	address = {Berlin, Heidelberg},
	title = {Verifying {Resource} {Compliance} {Requirements} {From} {Natural} {Language} {Text} {Over} {Event} {Logs}},
	isbn = {978-3-031-41619-4},
	url = {https://doi.org/10.1007/978-3-031-41620-0_15},
	doi = {10.1007/978-3-031-41620-0_15},
	abstract = {Process compliance aims to ensure that processes adhere to requirements imposed by natural language texts such as regulatory documents. Existing approaches assume that requirements are available in a formalized manner using, e.g., linear temporal logic, leaving the question open of how to automatically extract and formalize them for verification. Especially with the constantly growing amount of regulatory documents and their frequent updates, it can be preferable to provide an approach that enables the verification of processes with requirements in natural language text instead of formalized requirements. To this end, this paper presents an approach that copes with the verification of resource compliance requirements, e.g., which resource shall perform which activity, in natural language over event logs. The approach relies on a comprehensive literature analysis to identify resource compliance patterns. It then contrasts these patterns with resource patterns reflecting the process perspective, while considering the natural language perspective. We combine the state-of-the-art GPT-4 technology for pre-processing the natural language text with a customized compliance verification component to identify and verify resource compliance requirements. Thereby, the approach distinguishes different resource patterns including multiple organizational perspectives. The approach is evaluated based on a set of well-established process descriptions and synthesized event logs generated by a process execution engine as well as the BPIC 2020 dataset.},
	booktitle = {Business {Process} {Management}: 21st {International} {Conference}, {BPM} 2023, {Utrecht}, {The} {Netherlands}, {September} 11–15, 2023, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Mustroph, Henryk and Barrientos, Marisol and Winter, Karolin and Rinderle-Ma, Stefanie},
	year = {2023},
	keywords = {Event Logs, Natural Language Text, Process Descriptions, Compliance Requirements Verification, Resource Mining},
	pages = {249--265},
	annote = {event-place: Utrecht, The Netherlands},
}


@inproceedings{barrientos_verification_2023,
	address = {Berlin, Heidelberg},
	title = {Verification of {Quantitative} {Temporal} {Compliance} {Requirements} in {Process} {Descriptions} {Over} {Event} {Logs}},
	isbn = {978-3-031-34559-3},
	url = {https://doi.org/10.1007/978-3-031-34560-9_25},
	doi = {10.1007/978-3-031-34560-9_25},
	abstract = {Process compliance verification ensures that processes adhere to a set of given regulatory requirements which are typically assumed to be available in a formalized way using, e.g., LTL. However, formalized requirements are rarely available in practice, but rather embedded in regulatory documents such as the GDPR, requiring extraction and formalization by experts. Due to the vast amount and frequent changes in regulatory documents, it is almost impossible to keep formalized requirements up to date in a manual way. Therefore, this paper presents an approach towards compliance verification between natural language text and event logs without the need for requirements formalization. This enables humans to cope with an increasingly complex environment. The approach focuses on quantitative temporal requirements (QTCR) and consists of multiple steps. First, we identify clauses with temporal expressions from process descriptions. Second, we generate a set of QTCR by mapping the retrieved clauses to event log activities. Finally, in the third step, we verify that the event log is compliant with the QTCR. The approach is evaluated based on process descriptions and synthesized event logs. For the latter, we implement time shifting as a concept for simulating real-life logs with varying temporal challenges.},
	booktitle = {Advanced {Information} {Systems} {Engineering}: 35th {International} {Conference}, {CAiSE} 2023, {Zaragoza}, {Spain}, {June} 12–16, 2023, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Barrientos, Marisol and Winter, Karolin and Mangler, Juergen and Rinderle-Ma, Stefanie},
	year = {2023},
	keywords = {Event Logs, Compliance Verification, Natural Language Text, Process Descriptions, Temporal Compliance Requirements},
	pages = {417--433},
	annote = {event-place: Zaragoza, Spain},
}


